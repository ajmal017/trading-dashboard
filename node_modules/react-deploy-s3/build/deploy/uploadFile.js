'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _filesize = require('filesize');

var _filesize2 = _interopRequireDefault(_filesize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function _callee(_ref) {
  var bucket = _ref.bucket;
  var file = _ref.file;
  var spinner = _ref.spinner;
  var s3, stream, stats, contentType, fileName, size;
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          s3 = new _awsSdk2.default.S3();
          stream = _fs2.default.createReadStream(file);
          stats = _fs2.default.statSync(file);
          contentType = _mime2.default.lookup(file);
          fileName = file.replace(/^build\//, '');
          size = (0, _filesize2.default)(stats.size);
          return _context.abrupt('return', new Promise(function (resolve, reject) {
            s3.upload({
              Bucket: bucket,
              Key: fileName,
              Body: stream,
              ACL: 'public-read',
              ContentType: contentType
            }, function (error, data) {
              if (error) {
                reject(error);
              } else {
                spinner.setSpinnerTitle('%s   Uploaded ' + fileName + ' ' + size + '...');
                resolve(data);
              }
            });
          }));

        case 7:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};