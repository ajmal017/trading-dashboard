'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _clean = require('./clean');

var _clean2 = _interopRequireDefault(_clean);

var _getFiles = require('./getFiles');

var _getFiles2 = _interopRequireDefault(_getFiles);

var _cliSpinner = require('cli-spinner');

var _build = require('./build');

var _build2 = _interopRequireDefault(_build);

var _uploadFile = require('./uploadFile');

var _uploadFile2 = _interopRequireDefault(_uploadFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function _callee(_ref) {
  var accessKeyId = _ref.accessKeyId;
  var secretAccessKey = _ref.secretAccessKey;
  var bucket = _ref.bucket;
  var region = _ref.region;
  var shouldBuild = _ref.shouldBuild;
  var s3, files, spinner, uploads;
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!shouldBuild) {
            _context.next = 3;
            break;
          }

          _context.next = 3;
          return _regenerator2.default.awrap((0, _build2.default)());

        case 3:

          _awsSdk2.default.config.update({
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region
          });

          s3 = new _awsSdk2.default.S3();
          _context.next = 7;
          return _regenerator2.default.awrap((0, _clean2.default)({ s3: s3, bucket: bucket }));

        case 7:
          files = (0, _getFiles2.default)();
          spinner = new _cliSpinner.Spinner('%s');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();
          spinner.setSpinnerTitle('%s   Uploading files...');

          uploads = files.map(function (file) {
            return (0, _uploadFile2.default)({ bucket: bucket, file: file, spinner: spinner });
          });
          _context.next = 15;
          return _regenerator2.default.awrap(Promise.all(uploads));

        case 15:

          spinner.stop(true);

        case 16:
        case 'end':
          return _context.stop();
      }
    }
  }, null, undefined);
};