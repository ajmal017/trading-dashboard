'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _createBucket = require('./createBucket');

var _createBucket2 = _interopRequireDefault(_createBucket);

var _configBucket = require('./configBucket');

var _configBucket2 = _interopRequireDefault(_configBucket);

var _createCloudFrontDistribution = require('./createCloudFrontDistribution');

var _createCloudFrontDistribution2 = _interopRequireDefault(_createCloudFrontDistribution);

var _cliColor = require('cli-color');

var _cliColor2 = _interopRequireDefault(_cliColor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var setup = function _callee() {
  var regions, credentials, _ref, bucketName, s3, _ref2, createCloudFront, cloudfront, distributionId;

  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          regions = ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ca-central-1', 'eu-west-1', 'eu-central-1', 'eu-west-2', 'ap-northeast-1', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-south-1', 'sa-east-1'];
          _context.next = 3;
          return _regenerator2.default.awrap(_inquirer2.default.prompt([{ type: 'input', name: 'accessKeyId', message: 'AWS Access Key Id' }, { type: 'password', name: 'secretAccessKey', message: 'AWS Secret Access Key' }, { type: 'list', name: 'region', message: 'AWS Region', choices: regions }]));

        case 3:
          credentials = _context.sent;


          _awsSdk2.default.config.update(credentials);

          _context.next = 7;
          return _regenerator2.default.awrap(_inquirer2.default.prompt([{ type: 'input', name: 'bucketName', message: 'Name of the bucket' }]));

        case 7:
          _ref = _context.sent;
          bucketName = _ref.bucketName;
          s3 = new _awsSdk2.default.S3();


          console.log('');

          _context.next = 13;
          return _regenerator2.default.awrap((0, _createBucket2.default)(s3, bucketName));

        case 13:
          _context.next = 15;
          return _regenerator2.default.awrap((0, _configBucket2.default)(s3, bucketName));

        case 15:

          console.log('');

          _context.next = 18;
          return _regenerator2.default.awrap(_inquirer2.default.prompt([{ type: 'confirm', name: 'createCloudFront', message: 'Create CloudFront distribution' }]));

        case 18:
          _ref2 = _context.sent;
          createCloudFront = _ref2.createCloudFront;

          if (createCloudFront) {
            _context.next = 28;
            break;
          }

          console.log('\n' + _cliColor2.default.bold('Your bucket is configured now run react-deploy-s3 deploy') + '\n');
          console.log('react-deploy-s3 deploy \\');
          console.log('  --access-key-id ' + credentials.accessKeyId + ' \\');
          console.log('  --secret-access-key ' + credentials.secretAccessKey + ' \\');
          console.log('  --bucket ' + bucketName + ' \\');
          console.log('  --region ' + credentials.region);
          return _context.abrupt('return');

        case 28:
          cloudfront = new _awsSdk2.default.CloudFront();
          _context.next = 31;
          return _regenerator2.default.awrap((0, _createCloudFrontDistribution2.default)(cloudfront, bucketName));

        case 31:
          distributionId = _context.sent;

          console.log('\n' + _cliColor2.default.bold('Your bucket and your CloudFront distribution are configured.'));

          console.log('');
          console.log('react-deploy-s3 deploy \\');
          console.log('  --access-key-id ' + credentials.accessKeyId + ' \\');
          console.log('  --secret-access-key ' + credentials.secretAccessKey + ' \\');
          console.log('  --bucket ' + bucketName + ' \\');
          console.log('  --region ' + credentials.region + ' \\');
          console.log('  --distribution-id ' + distributionId);

        case 40:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};

exports.default = function _callee2() {
  return _regenerator2.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;

          console.log('\n' + _cliColor2.default.blue.underline('React deploy S3: Setup') + '\n');
          _context2.next = 4;
          return _regenerator2.default.awrap(setup());

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2['catch'](0);

          console.log('\n' + _cliColor2.default.bold.red(_context2.t0.message) + '\n');
          process.exit(1);

        case 10:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this, [[0, 6]]);
};