'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _requestSSL = require('./requestSSL');

var _requestSSL2 = _interopRequireDefault(_requestSSL);

var _cliSpinner = require('cli-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function _callee(cloudfront, bucketName) {
  var _ref, aliases, domains, sslACM, _ref2, addSSL, params, spinner, _ref3, Id;

  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator2.default.awrap(_inquirer2.default.prompt([{ type: 'input', name: 'aliases', message: 'Aliases (CNAME). Separate with comma' }]));

        case 2:
          _ref = _context.sent;
          aliases = _ref.aliases;
          domains = aliases.split(',').map(function (alias) {
            return alias.trim();
          });
          sslACM = null;

          if (!(domains && domains.length)) {
            _context.next = 16;
            break;
          }

          _context.next = 9;
          return _regenerator2.default.awrap(_inquirer2.default.prompt([{ type: 'confirm', name: 'addSSL', message: 'Request a AWS managed SSL for the domains' }]));

        case 9:
          _ref2 = _context.sent;
          addSSL = _ref2.addSSL;

          if (!addSSL) {
            _context.next = 16;
            break;
          }

          console.log('');
          _context.next = 15;
          return _regenerator2.default.awrap((0, _requestSSL2.default)(domains));

        case 15:
          sslACM = _context.sent;

        case 16:
          params = {
            DistributionConfig: {
              Enabled: true,
              CallerReference: String(Number(new Date())),
              Comment: 'Distribution for ' + bucketName,
              Aliases: {
                Quantity: domains.length,
                Items: domains
              },
              Origins: {
                Quantity: 1,
                Items: [{
                  DomainName: bucketName + '.s3.amazonaws.com',
                  Id: 'S3-' + bucketName,
                  S3OriginConfig: {
                    OriginAccessIdentity: ''
                  }
                }]
              },
              DefaultCacheBehavior: {
                ForwardedValues: {
                  Cookies: {
                    Forward: 'none'
                  },
                  QueryString: false
                },
                MinTTL: 0,
                TargetOriginId: 'S3-' + bucketName,
                TrustedSigners: {
                  Enabled: false,
                  Quantity: 0
                },
                ViewerProtocolPolicy: 'allow-all'
              },
              CustomErrorResponses: {
                Quantity: 3,
                Items: [{
                  ErrorCode: 400,
                  ErrorCachingMinTTL: 300,
                  ResponseCode: '200',
                  ResponsePagePath: '/index.html'
                }, {
                  ErrorCode: 403,
                  ErrorCachingMinTTL: 300,
                  ResponseCode: '200',
                  ResponsePagePath: '/index.html'
                }, {
                  ErrorCode: 404,
                  ErrorCachingMinTTL: 300,
                  ResponseCode: '200',
                  ResponsePagePath: '/index.html'
                }]
              },
              DefaultRootObject: '/index.html',
              PriceClass: 'PriceClass_All',
              ViewerCertificate: sslACM ? {
                ACMCertificateArn: sslACM,
                Certificate: 'allow-all',
                CertificateSource: 'acm',
                CloudFrontDefaultCertificate: false,
                MinimumProtocolVersion: 'TLSv1',
                SSLSupportMethod: 'sni-only'
              } : undefined
            }
          };


          console.log('');

          spinner = new _cliSpinner.Spinner('%s Creating CloudFront distribution...');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();

          _context.next = 23;
          return _regenerator2.default.awrap(cloudfront.createDistribution(params).promise());

        case 23:
          _ref3 = _context.sent;
          Id = _ref3.Distribution.Id;


          spinner.stop(true);

          console.log('CloudFront ready. Save the distribution id ' + Id);
          return _context.abrupt('return', Id);

        case 28:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};