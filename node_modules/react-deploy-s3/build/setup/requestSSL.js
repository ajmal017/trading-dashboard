'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _getValidationDomain = require('./getValidationDomain');

var _getValidationDomain2 = _interopRequireDefault(_getValidationDomain);

var _cliSpinner = require('cli-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sleep = function sleep(timeout) {
  return new Promise(function (resolve) {
    setTimeout(resolve, timeout);
  });
};

var getStatus = function _callee(CertificateArn) {
  var acm, _ref, Certificate;

  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          acm = new _awsSdk2.default.ACM();
          _context.next = 3;
          return _regenerator2.default.awrap(acm.describeCertificate({
            CertificateArn: CertificateArn
          }).promise());

        case 3:
          _ref = _context.sent;
          Certificate = _ref.Certificate;
          return _context.abrupt('return', {
            status: Certificate.Status,
            domainValidation: Certificate.DomainValidationOptions
          });

        case 6:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};

var checkReady = function _callee2(arn) {
  var _ref2, status;

  return _regenerator2.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!true) {
            _context2.next = 11;
            break;
          }

          _context2.next = 3;
          return _regenerator2.default.awrap(sleep(2000));

        case 3:
          _context2.next = 5;
          return _regenerator2.default.awrap(getStatus(arn));

        case 5:
          _ref2 = _context2.sent;
          status = _ref2.status;

          if (!(status === 'ISSUED')) {
            _context2.next = 9;
            break;
          }

          return _context2.abrupt('return');

        case 9:
          _context2.next = 0;
          break;

        case 11:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this);
};

exports.default = function _callee3(aliases) {
  var acm, domains, validationOptions, mainDomain, _ref3, CertificateArn, spinner;

  return _regenerator2.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          acm = new _awsSdk2.default.ACM();
          domains = aliases.map(function (alias) {
            return alias;
          }); // to clone it

          validationOptions = domains.map(function (domain) {
            return {
              DomainName: domain,
              ValidationDomain: (0, _getValidationDomain2.default)(domain)
            };
          });
          mainDomain = domains[0];

          domains.splice(0, 1);

          console.log('Requesting certificate...');

          _context3.next = 8;
          return _regenerator2.default.awrap(acm.requestCertificate({
            DomainName: mainDomain,
            IdempotencyToken: 'app_ssl_request_' + String(Number(new Date())),
            DomainValidationOptions: validationOptions,
            SubjectAlternativeNames: domains.length ? domains : undefined
          }).promise());

        case 8:
          _ref3 = _context3.sent;
          CertificateArn = _ref3.CertificateArn;
          _context3.next = 12;
          return _regenerator2.default.awrap(acm.addTagsToCertificate({
            CertificateArn: CertificateArn,
            Tags: [{ Key: 'Name', Value: 'Certificate for ' + mainDomain + ' generated by react-deploy-s3' }]
          }).promise());

        case 12:

          console.log('Please check your email to accept the request');

          spinner = new _cliSpinner.Spinner('%s Don\'t close me, I will wait and check when you finish...');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();

          _context3.next = 18;
          return _regenerator2.default.awrap(checkReady(CertificateArn));

        case 18:
          spinner.stop(true);
          console.log('Certificate is ready');

          return _context3.abrupt('return', CertificateArn);

        case 21:
        case 'end':
          return _context3.stop();
      }
    }
  }, null, this);
};