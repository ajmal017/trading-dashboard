#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _cliColor = require('cli-color');

var _cliColor2 = _interopRequireDefault(_cliColor);

var _setup = require('./setup');

var _setup2 = _interopRequireDefault(_setup);

var _deploy = require('./deploy');

var _deploy2 = _interopRequireDefault(_deploy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version('2.0.0');

_commander2.default.command('setup').description('Setup your AWS S3 and Cloudfront endpoints').action(function _callee(cmd, options) {
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator2.default.awrap((0, _setup2.default)());

        case 2:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
});

_commander2.default.command('deploy').description('Deploy a new build of your app').option('-a, --access-key-id [accessKey]', 'AWS access key').option('-s, --secret-access-key [secretKey]', 'AWS secret access key').option('-b, --bucket [bucket]', 'Name of the bucket').option('-r, --region [region]', 'Region of the bucket [us-east-1]', 'us-east-1').option('-c, --rebuild-app [yes/no]', 'Compile the app [yes]').option('-d, --distribution-id [distribution-id]', 'Cloudfront distrubution to invalidate index.html').action(function _callee2(cmd, options) {
  return _regenerator2.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;

          if (cmd.accessKeyId) {
            _context2.next = 3;
            break;
          }

          throw new Error('access-key-id is required');

        case 3:
          if (cmd.secretAccessKey) {
            _context2.next = 5;
            break;
          }

          throw new Error('secret-access-key is required');

        case 5:
          if (cmd.bucket) {
            _context2.next = 7;
            break;
          }

          throw new Error('bucket is required');

        case 7:
          _context2.next = 9;
          return _regenerator2.default.awrap((0, _deploy2.default)(cmd));

        case 9:
          _context2.next = 16;
          break;

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2['catch'](0);

          console.log('\n' + _cliColor2.default.bold.red(_context2.t0.message) + '\n');
          console.log(_context2.t0);
          process.exit(1);

        case 16:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this, [[0, 11]]);
});

_commander2.default.parse(process.argv);