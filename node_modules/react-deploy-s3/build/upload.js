'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _clean = require('./clean');

var _clean2 = _interopRequireDefault(_clean);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _getFiles = require('./getFiles');

var _getFiles2 = _interopRequireDefault(_getFiles);

var _filesize = require('filesize');

var _filesize2 = _interopRequireDefault(_filesize);

var _cliSpinner = require('cli-spinner');

var _build = require('./build');

var _build2 = _interopRequireDefault(_build);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function _callee2(_ref) {
  var accessKeyId = _ref.accessKeyId;
  var secretAccessKey = _ref.secretAccessKey;
  var bucket = _ref.bucket;
  var region = _ref.region;

  var s3, files, spinner, _loop, i;

  return _regenerator2.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _regenerator2.default.awrap((0, _build2.default)());

        case 2:
          _awsSdk2.default.config.update({
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region
          });

          s3 = new _awsSdk2.default.S3();
          _context2.next = 6;
          return _regenerator2.default.awrap((0, _clean2.default)({ s3: s3, bucket: bucket }));

        case 6:
          files = (0, _getFiles2.default)();
          spinner = new _cliSpinner.Spinner('%s');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();

          _loop = function _callee() {
            var file, stream, stats, contentType, fileName, size;
            return _regenerator2.default.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    file = files[i];
                    stream = _fs2.default.createReadStream(file);
                    stats = _fs2.default.statSync(file);
                    contentType = _mime2.default.lookup(file);
                    fileName = file.replace(/^build\//, '');
                    size = (0, _filesize2.default)(stats.size);

                    spinner.setSpinnerTitle('%s   Uploading ' + fileName + ' (' + size + ')...');

                    _context.next = 9;
                    return _regenerator2.default.awrap(new Promise(function (resolve, reject) {
                      s3.upload({
                        Bucket: bucket,
                        Key: fileName,
                        Body: stream,
                        ACL: 'public-read',
                        ContentType: contentType
                      }, function (error, data) {
                        if (error) {
                          reject(error);
                        } else {
                          resolve(data);
                        }
                      });
                    }));

                  case 9:
                  case 'end':
                    return _context.stop();
                }
              }
            }, null, undefined);
          };

          i = 0;

        case 12:
          if (!(i < files.length)) {
            _context2.next = 18;
            break;
          }

          _context2.next = 15;
          return _regenerator2.default.awrap(_loop());

        case 15:
          i++;
          _context2.next = 12;
          break;

        case 18:
          spinner.stop(true);

        case 19:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, undefined);
};