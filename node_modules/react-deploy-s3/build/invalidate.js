'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _cliSpinner = require('cli-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function _callee(_ref) {
  var accessKeyId = _ref.accessKeyId;
  var secretAccessKey = _ref.secretAccessKey;
  var distributionId = _ref.distributionId;
  var cloudfront, spinner, timestamp, params;
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _awsSdk2.default.config.update({ accessKeyId: accessKeyId, secretAccessKey: secretAccessKey });
          cloudfront = new _awsSdk2.default.CloudFront();
          spinner = new _cliSpinner.Spinner('%s Creating invalidation');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();

          timestamp = Math.floor(Date.now() / 1000).toString();
          params = {
            DistributionId: distributionId,
            InvalidationBatch: {
              CallerReference: 'react-deploy-s3-' + timestamp,
              Paths: {
                Quantity: 1,
                Items: ['/index.html']
              }
            }
          };
          _context.next = 9;
          return _regenerator2.default.awrap(cloudfront.createInvalidation(params).promise());

        case 9:

          spinner.stop(true);

        case 10:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};