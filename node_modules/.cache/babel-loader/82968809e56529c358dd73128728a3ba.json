{"ast":null,"code":"import _classCallCheck from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar Config = {\n  PROTOCOL: \"ws:\",\n  //HOST: \"//localhost\",\n  HOST: \"//ec2-52-69-225-97.ap-northeast-1.compute.amazonaws.com\",\n  PORT: \":7889\"\n};\n\nvar Socket =\n/*#__PURE__*/\nfunction () {\n  function Socket() {\n    var _this = this;\n\n    _classCallCheck(this, Socket);\n\n    this.opened = false;\n    this.callbacks = {};\n    this.subjectsPendingSubscription = [];\n    var address = Config.PROTOCOL + Config.HOST + Config.PORT;\n    console.log(\"Created a WebSocket connecting to: \" + address);\n    this.socket = new WebSocket(address);\n\n    this.socket.onopen = function () {\n      _this.opened = true;\n      console.log(\"Socket has been opened\"); // subscribing to all pending subjects\n\n      _this.subjectsPendingSubscription.forEach(function (subject) {\n        return _this.startSubscription(subject);\n      });\n    };\n\n    this.socket.onmessage = function (msg) {\n      console.log(\"Incoming message on socket: \" + msg.data);\n      var subject = msg.data.substring(msg.data.indexOf(\":\") + 1); // trigger corresponding callback\n\n      _this.callbacks[subject]();\n    };\n  }\n\n  _createClass(Socket, [{\n    key: \"startSubscription\",\n    value: function startSubscription(subscriptionSubject) {\n      var msg = JSON.stringify({\n        type: \"SUBSCRIBE\",\n        subject: subscriptionSubject\n      });\n      this.socket.send(msg);\n    }\n  }, {\n    key: \"subscribeForPushNotifications\",\n    value: function subscribeForPushNotifications(subscriptionSubject, callback) {\n      if (this.opened) {\n        this.startSubscription(subscriptionSubject);\n      } else {\n        this.subjectsPendingSubscription.push(subscriptionSubject);\n      }\n\n      this.callbacks[subscriptionSubject] = callback;\n    }\n  }]);\n\n  return Socket;\n}();\n\nexport default Socket;","map":{"version":3,"sources":["/home/dmitry/React/dashboard/src/socket/Socket.js"],"names":["Config","PROTOCOL","HOST","PORT","Socket","opened","callbacks","subjectsPendingSubscription","address","console","log","socket","WebSocket","onopen","forEach","subject","startSubscription","onmessage","msg","data","substring","indexOf","subscriptionSubject","JSON","stringify","type","send","callback","push"],"mappings":";;AAAA,IAAMA,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE,KADG;AAEb;AACAC,EAAAA,IAAI,EAAE,yDAHO;AAIbC,EAAAA,IAAI,EAAE;AAJO,CAAf;;IAQMC,M;;;AAOJ,oBAAc;AAAA;;AAAA;;AAAA,SAJdC,MAIc,GAJL,KAIK;AAAA,SAHdC,SAGc,GAHF,EAGE;AAAA,SAFdC,2BAEc,GAFgB,EAEhB;AACZ,QAAMC,OAAO,GAAGR,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,IAAzB,GAAgCF,MAAM,CAACG,IAAvD;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCF,OAApD;AACA,SAAKG,MAAL,GAAc,IAAIC,SAAJ,CAAcJ,OAAd,CAAd;;AAEA,SAAKG,MAAL,CAAYE,MAAZ,GAAqB,YAAM;AACzB,MAAA,KAAI,CAACR,MAAL,GAAc,IAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAFyB,CAGzB;;AACA,MAAA,KAAI,CAACH,2BAAL,CAAiCO,OAAjC,CAAyC,UAAAC,OAAO;AAAA,eAAI,KAAI,CAACC,iBAAL,CAAuBD,OAAvB,CAAJ;AAAA,OAAhD;AACD,KALD;;AAOA,SAAKJ,MAAL,CAAYM,SAAZ,GAAwB,UAACC,GAAD,EAAS;AAC/BT,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCQ,GAAG,CAACC,IAAjD;AACA,UAAIJ,OAAO,GAAGG,GAAG,CAACC,IAAJ,CAASC,SAAT,CAAmBF,GAAG,CAACC,IAAJ,CAASE,OAAT,CAAiB,GAAjB,IAAwB,CAA3C,CAAd,CAF+B,CAG/B;;AACA,MAAA,KAAI,CAACf,SAAL,CAAeS,OAAf;AACD,KALD;AAMD;;;;sCAEiBO,mB,EAAqB;AACnC,UAAMJ,GAAG,GAAGK,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,IAAI,EAAC,WAAN;AAAmBV,QAAAA,OAAO,EAACO;AAA3B,OAAf,CAAZ;AACA,WAAKX,MAAL,CAAYe,IAAZ,CAAiBR,GAAjB;AACH;;;kDAE6BI,mB,EAAqBK,Q,EAAU;AAE3D,UAAI,KAAKtB,MAAT,EAAiB;AACf,aAAKW,iBAAL,CAAuBM,mBAAvB;AACD,OAFD,MAEO;AACL,aAAKf,2BAAL,CAAiCqB,IAAjC,CAAsCN,mBAAtC;AACD;;AAED,WAAKhB,SAAL,CAAegB,mBAAf,IAAsCK,QAAtC;AACD;;;;;;AAIH,eAAevB,MAAf","sourcesContent":["const Config = {\n  PROTOCOL: \"ws:\",\n  //HOST: \"//localhost\",\n  HOST: \"//ec2-52-69-225-97.ap-northeast-1.compute.amazonaws.com\",\n  PORT: \":7889\"\n\n}\n\nclass Socket {\n\n  socket\n  opened = false\n  callbacks = {}\n  subjectsPendingSubscription = []\n\n  constructor() {\n    const address = Config.PROTOCOL + Config.HOST + Config.PORT\n    console.log(\"Created a WebSocket connecting to: \" + address)\n    this.socket = new WebSocket(address)\n\n    this.socket.onopen = () => {\n      this.opened = true\n      console.log(\"Socket has been opened\")\n      // subscribing to all pending subjects\n      this.subjectsPendingSubscription.forEach(subject => this.startSubscription(subject))\n    }\n\n    this.socket.onmessage = (msg) => {\n      console.log(\"Incoming message on socket: \" + msg.data)\n      let subject = msg.data.substring(msg.data.indexOf(\":\") + 1)\n      // trigger corresponding callback\n      this.callbacks[subject]()\n    }\n  }\n\n  startSubscription(subscriptionSubject) {\n      const msg = JSON.stringify({type:\"SUBSCRIBE\", subject:subscriptionSubject})\n      this.socket.send(msg)\n  }\n\n  subscribeForPushNotifications(subscriptionSubject, callback) {\n\n    if (this.opened) {\n      this.startSubscription(subscriptionSubject)\n    } else {\n      this.subjectsPendingSubscription.push(subscriptionSubject)\n    }\n\n    this.callbacks[subscriptionSubject] = callback\n  }\n\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}