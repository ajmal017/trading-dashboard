{"ast":null,"code":"import _classCallCheck from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar Config = {\n  PROTOCOL: \"ws:\",\n  HOST: \"//localhost\",\n  PORT: \":7888\"\n};\n\nvar Socket =\n/*#__PURE__*/\nfunction () {\n  function Socket() {\n    var _this = this;\n\n    _classCallCheck(this, Socket);\n\n    this.opened = false;\n    var address = Config.PROTOCOL + Config.HOST + Config.PORT;\n    console.log(\"Created a WebSocket connecting to: \" + address);\n    this.socket = new WebSocket(address);\n\n    this.socket.onopen = function () {\n      _this.opened = true;\n    };\n  }\n\n  _createClass(Socket, [{\n    key: \"subscribeForPushNotifications\",\n    value: function subscribeForPushNotifications(subscriptionSubject, callback) {\n      var socket = Socket.getNewInstance();\n\n      if (this.opened) {\n        var msg = JSON.stringify({\n          type: \"SUBSCRIBE\",\n          subject: subscriptionSubject\n        });\n        socket.send(msg);\n      }\n\n      socket.onmessage = function (msg) {\n        // TODO trigger callback conditionally\n        console.log(\"SOCKET: \" + msg.data);\n        callback();\n      };\n    }\n  }]);\n\n  return Socket;\n}();\n\nexport default Socket;","map":{"version":3,"sources":["/home/dmitry/React/dashboard/src/socket/Socket.js"],"names":["Config","PROTOCOL","HOST","PORT","Socket","opened","address","console","log","socket","WebSocket","onopen","subscriptionSubject","callback","getNewInstance","msg","JSON","stringify","type","subject","send","onmessage","data"],"mappings":";;AAAA,IAAMA,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE,KADG;AAEbC,EAAAA,IAAI,EAAE,aAFO;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAf;;IAMMC,M;;;AAKJ,oBAAc;AAAA;;AAAA;;AAAA,SAFdC,MAEc,GAFL,KAEK;AACZ,QAAMC,OAAO,GAAGN,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,IAAzB,GAAgCF,MAAM,CAACG,IAAvD;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCF,OAApD;AACA,SAAKG,MAAL,GAAc,IAAIC,SAAJ,CAAcJ,OAAd,CAAd;;AAEA,SAAKG,MAAL,CAAYE,MAAZ,GAAqB,YAAM;AACzB,MAAA,KAAI,CAACN,MAAL,GAAc,IAAd;AACD,KAFD;AAGD;;;;kDAE6BO,mB,EAAqBC,Q,EAAU;AAE3D,UAAMJ,MAAM,GAAGL,MAAM,CAACU,cAAP,EAAf;;AAEA,UAAI,KAAKT,MAAT,EAAiB;AACf,YAAMU,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACC,UAAAA,IAAI,EAAC,WAAN;AAAmBC,UAAAA,OAAO,EAACP;AAA3B,SAAf,CAAZ;AACAH,QAAAA,MAAM,CAACW,IAAP,CAAYL,GAAZ;AACD;;AAEDN,MAAAA,MAAM,CAACY,SAAP,GAAmB,UAACN,GAAD,EAAS;AAC1B;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAaO,GAAG,CAACO,IAA7B;AACAT,QAAAA,QAAQ;AACT,OAJD;AAKD;;;;;;AAIH,eAAeT,MAAf","sourcesContent":["const Config = {\n  PROTOCOL: \"ws:\",\n  HOST: \"//localhost\",\n  PORT: \":7888\"\n}\n\nclass Socket {\n\n  socket\n  opened = false\n\n  constructor() {\n    const address = Config.PROTOCOL + Config.HOST + Config.PORT\n    console.log(\"Created a WebSocket connecting to: \" + address)\n    this.socket = new WebSocket(address)\n\n    this.socket.onopen = () => {\n      this.opened = true\n    }\n  }\n\n  subscribeForPushNotifications(subscriptionSubject, callback) {\n\n    const socket = Socket.getNewInstance()\n  \n    if (this.opened) {\n      const msg = JSON.stringify({type:\"SUBSCRIBE\", subject:subscriptionSubject})\n      socket.send(msg)\n    }\n  \n    socket.onmessage = (msg) => {\n      // TODO trigger callback conditionally\n      console.log(\"SOCKET: \" + msg.data)\n      callback()\n    }\n  }\n\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}