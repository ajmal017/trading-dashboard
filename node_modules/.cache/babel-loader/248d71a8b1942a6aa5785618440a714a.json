{"ast":null,"code":"import _classCallCheck from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dmitry/React/dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar Config = {\n  PROTOCOL: \"ws:\",\n  HOST: \"//localhost\",\n  PORT: \":7888\"\n};\n\nvar Socket =\n/*#__PURE__*/\nfunction () {\n  function Socket() {\n    var _this = this;\n\n    _classCallCheck(this, Socket);\n\n    this.opened = false;\n    this.callbacks = {};\n    this.pendingSubscriptions = [];\n    var address = Config.PROTOCOL + Config.HOST + Config.PORT;\n    console.log(\"Created a WebSocket connecting to: \" + address);\n    this.socket = new WebSocket(address);\n\n    this.socket.onopen = function () {\n      _this.opened = true; // subscribing for all pending subjects\n\n      if (_this.pendingSubscriptions.length > 0) {}\n    };\n\n    this.socket.onmessage = function (msg) {\n      console.log(\"SOCKET: \" + msg.data);\n      var subject = msg.data.substring(msg.data.indexOf(\":\") + 1); // trigger corresponding callback\n\n      _this.callbacks[subject]();\n    };\n  }\n\n  _createClass(Socket, [{\n    key: \"subscribeForPushNotifications\",\n    value: function subscribeForPushNotifications(subscriptionSubject, callback) {\n      if (this.opened) {\n        var msg = JSON.stringify({\n          type: \"SUBSCRIBE\",\n          subject: subscriptionSubject\n        });\n        this.socket.send(msg);\n      } else {\n        this.pendingSubscriptions.push(subscriptionSubject);\n      }\n\n      this.callbacks[subscriptionSubject] = callback;\n    }\n  }]);\n\n  return Socket;\n}();\n\nexport default Socket;","map":{"version":3,"sources":["/home/dmitry/React/dashboard/src/socket/Socket.js"],"names":["Config","PROTOCOL","HOST","PORT","Socket","opened","callbacks","pendingSubscriptions","address","console","log","socket","WebSocket","onopen","length","onmessage","msg","data","subject","substring","indexOf","subscriptionSubject","callback","JSON","stringify","type","send","push"],"mappings":";;AAAA,IAAMA,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE,KADG;AAEbC,EAAAA,IAAI,EAAE,aAFO;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAf;;IAMMC,M;;;AAOJ,oBAAc;AAAA;;AAAA;;AAAA,SAJdC,MAIc,GAJL,KAIK;AAAA,SAHdC,SAGc,GAHF,EAGE;AAAA,SAFdC,oBAEc,GAFS,EAET;AACZ,QAAMC,OAAO,GAAGR,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,IAAzB,GAAgCF,MAAM,CAACG,IAAvD;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCF,OAApD;AACA,SAAKG,MAAL,GAAc,IAAIC,SAAJ,CAAcJ,OAAd,CAAd;;AAEA,SAAKG,MAAL,CAAYE,MAAZ,GAAqB,YAAM;AACzB,MAAA,KAAI,CAACR,MAAL,GAAc,IAAd,CADyB,CAEzB;;AACA,UAAI,KAAI,CAACE,oBAAL,CAA0BO,MAA1B,GAAmC,CAAvC,EAA0C,CAEzC;AACF,KAND;;AAQA,SAAKH,MAAL,CAAYI,SAAZ,GAAwB,UAACC,GAAD,EAAS;AAC/BP,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaM,GAAG,CAACC,IAA7B;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACC,IAAJ,CAASE,SAAT,CAAmBH,GAAG,CAACC,IAAJ,CAASG,OAAT,CAAiB,GAAjB,IAAwB,CAA3C,CAAd,CAF+B,CAG/B;;AACA,MAAA,KAAI,CAACd,SAAL,CAAeY,OAAf;AACD,KALD;AAMD;;;;kDAE6BG,mB,EAAqBC,Q,EAAU;AAE3D,UAAI,KAAKjB,MAAT,EAAiB;AACf,YAAMW,GAAG,GAAGO,IAAI,CAACC,SAAL,CAAe;AAACC,UAAAA,IAAI,EAAC,WAAN;AAAmBP,UAAAA,OAAO,EAACG;AAA3B,SAAf,CAAZ;AACA,aAAKV,MAAL,CAAYe,IAAZ,CAAiBV,GAAjB;AACD,OAHD,MAGO;AACL,aAAKT,oBAAL,CAA0BoB,IAA1B,CAA+BN,mBAA/B;AACD;;AAED,WAAKf,SAAL,CAAee,mBAAf,IAAsCC,QAAtC;AACD;;;;;;AAIH,eAAelB,MAAf","sourcesContent":["const Config = {\n  PROTOCOL: \"ws:\",\n  HOST: \"//localhost\",\n  PORT: \":7888\"\n}\n\nclass Socket {\n\n  socket\n  opened = false\n  callbacks = {}\n  pendingSubscriptions = []\n\n  constructor() {\n    const address = Config.PROTOCOL + Config.HOST + Config.PORT\n    console.log(\"Created a WebSocket connecting to: \" + address)\n    this.socket = new WebSocket(address)\n\n    this.socket.onopen = () => {\n      this.opened = true\n      // subscribing for all pending subjects\n      if (this.pendingSubscriptions.length > 0) {\n\n      }\n    }\n\n    this.socket.onmessage = (msg) => {\n      console.log(\"SOCKET: \" + msg.data)\n      let subject = msg.data.substring(msg.data.indexOf(\":\") + 1)\n      // trigger corresponding callback\n      this.callbacks[subject]()\n    }\n  }\n\n  subscribeForPushNotifications(subscriptionSubject, callback) {\n\n    if (this.opened) {\n      const msg = JSON.stringify({type:\"SUBSCRIBE\", subject:subscriptionSubject})\n      this.socket.send(msg)\n    } else {\n      this.pendingSubscriptions.push(subscriptionSubject)\n    }\n\n    this.callbacks[subscriptionSubject] = callback\n  }\n\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}